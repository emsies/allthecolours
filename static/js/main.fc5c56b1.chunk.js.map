{"version":3,"sources":["Colours.js","App.js","serviceWorker.js","index.js"],"names":["Swatch","red","blue","green","style","backgroundColor","Colours","colorSteps","i","push","numberOfRows","steps","length","numberOfColumns","z","colorPallete","y","colorPalleteRow","tmp_z","tmp_z_end","x","colorSwatch","Math","floor","id","map","index","key","random","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mOAGMA,G,KAAS,SAAC,GAAD,IAAGC,EAAH,EAAGA,IAAKC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MAAd,OAA0B,wBAAIC,MAAO,CAAEC,gBAAgB,OAAD,OAASJ,EAAT,YAAgBE,EAAhB,YAAyBD,EAAzB,UAmDtDI,EAjDC,WAMd,IALA,IAIMC,EAAa,GACVC,EAAI,EAAGA,GALG,IAKcA,GAJnB,EAKZD,EAAWE,KAAKD,GASlB,IANA,IAAIE,EAPaC,GAOGJ,EAAWK,OAAS,GACpCC,EAAkBN,EAAWK,OAAS,EACtCE,EAAI,EAEFC,EAAe,GAEZC,EAAI,EAAGA,EAAIN,EAAcM,IAAK,CAKrC,IAJA,IAAMC,EAAkB,GACpBC,EAASF,EAfEL,EADH,EAiBRQ,EAAYD,EAjBJ,EAmBHE,EAAI,EAAGA,EAAIP,EAAiBO,IACnC,IAAKN,EAAII,EAAOJ,EAAIK,EAAWL,IAAK,CAClC,IAAMO,EAAc,CAAEpB,IAAKM,EAAWa,GAAIjB,MAAOI,EAAWe,KAAKC,MAAMP,EApB5DL,IAoB4ET,KAAMK,EAAWO,IAExGG,EAAgBR,KAAKY,GAIzBN,EAAaN,KAAKQ,GAGpB,OACE,8BACE,2BAAOO,GAAG,aACR,+BACGT,EAAaU,KAAI,SAACR,EAAiBS,GAAlB,OAChB,wBAAIC,IAAKD,GACNT,EAAgBQ,KAAI,gBAAGxB,EAAH,EAAGA,IAAKE,EAAR,EAAQA,MAAOD,EAAf,EAAeA,KAAf,OACnB,kBAAC,EAAD,CAAQyB,IAAKL,KAAKM,SAAU3B,IAAKA,EAAKE,MAAOA,EAAOD,KAAMA,e,KChC3D2B,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.fc5c56b1.chunk.js","sourcesContent":["import React from 'react';\n\n// Based off of http://jsfiddle.net/XpSVq/\nconst Swatch = ({ red, blue, green }) => <td style={{ backgroundColor: `rgb(${red},${green},${blue})` }} />;\n\nconst Colours = () => {\n  const colorRange = 256;\n  const steps = 8;\n  const halfStep = steps / 2;\n\n  const colorSteps = [];\n  for (let i = 0; i <= colorRange; i = i + steps) {\n    colorSteps.push(i);\n  }\n\n  let numberOfRows = (colorSteps.length - 1) * halfStep;\n  let numberOfColumns = colorSteps.length - 1;\n  let z = 0;\n\n  const colorPallete = [];\n\n  for (var y = 0; y < numberOfRows; y++) {\n    const colorPalleteRow = [];\n    let tmp_z = (y % halfStep) * steps;\n    let tmp_z_end = tmp_z + steps;\n\n    for (let x = 0; x < numberOfColumns; x++) {\n      for (z = tmp_z; z < tmp_z_end; z++) {\n        const colorSwatch = { red: colorSteps[x], green: colorSteps[Math.floor(y / halfStep)], blue: colorSteps[z] };\n\n        colorPalleteRow.push(colorSwatch);\n      }\n    }\n\n    colorPallete.push(colorPalleteRow);\n  }\n\n  return (\n    <main>\n      <table id=\"container\">\n        <tbody>\n          {colorPallete.map((colorPalleteRow, index) => (\n            <tr key={index}>\n              {colorPalleteRow.map(({ red, green, blue }) => (\n                <Swatch key={Math.random()} red={red} green={green} blue={blue} />\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </main>\n  );\n};\n\nexport default Colours;\n","import React from 'react';\nimport Colours from './Colours';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Colours />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}